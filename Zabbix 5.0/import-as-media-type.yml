zabbix_export:
  version: "5.0"
  date: "2021-02-24T14:57:02Z"
  media_types:
    - name: One Uptime Bridge Server
      type: WEBHOOK
      description: |
        https://github.com/subos2008/zabbix-one-uptime-webhook#readme
      parameters:
        - name: ONE_UPTIME_WORKFLOW_WEBHOOK_URL
          value: "{$ONE_UPTIME_WORKFLOW_WEBHOOK_URL}"
        - name: alert_subject
          value: "{ALERT.SUBJECT}"
        - name: host
          value: "{HOST.NAME}"
        - name: alert_message
          value: "{ALERT.MESSAGE}"
        - name: event_severity
          value: "{EVENT.NSEVERITY}"
        - name: event_is_problem
          value: "{EVENT.VALUE}"
        - name: event_is_update
          value: "{EVENT.UPDATE.STATUS}"
        - name: event_id
          value: "{EVENT.ID}"
        # - name: event_name
        #   value: "{EVENT.NAME}"
        # - name: event_cause_name
        #   value: "{EVENT.CAUSE.NAME}"
        # - name: event_symptoms
        #   value: "{EVENT.SYMPTOMS}"
        # - name: item_name
        #   value: "{ITEM.NAME}"
        # - name: trigger_name
        #   value: "{TRIGGER.NAME}"
        - name: trigger_id
          value: "{TRIGGER.ID}"
        - name: trigger_url
          value: "{TRIGGER.URL}" # http://zabbix.mydomain/tr_events.php?triggerid=28617&eventid=28001770
      message_templates:
        - event_source: TRIGGERS
          operation_mode: PROBLEM
          subject: "{EVENT.NAME}"
          message: |
            Problem {EVENT.ID} started at {EVENT.TIME} on {EVENT.DATE}
            Host: {HOST.NAME}
            Severity: {EVENT.SEVERITY}
        - event_source: TRIGGERS
          operation_mode: RECOVERY
          subject: "{EVENT.NAME} ({EVENT.DURATION})"
          message: |
            Problem {EVENT.ID} resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}
            Host: {HOST.NAME}
            Severity: {EVENT.SEVERITY}
        - event_source: TRIGGERS
          operation_mode: UPDATE
          subject: "{EVENT.NAME} ({EVENT.AGE})"
          message: |
            {USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}
            {EVENT.UPDATE.MESSAGE}

            Current problem status: {EVENT.STATUS}
            Age: {EVENT.AGE}
            Acknowledged: {EVENT.ACK.STATUS}
      script: |
        const required_input = [
          'SERVER_URL', // deployment of the code in ../server

          // Event severity values:
          // 0: Not classified
          // 1: Information
          // 2: Warning
          // 3: Average
          // 4: High
          // 5: Disaster
          'event_severity',

          // See logic below, these are either 0 or 1
          'event_is_problem',
          'event_is_update',

          // Used for mapping (WIP)
          'event_name',
          'event_id'
        ];

        var ZabbixOneUptimeBridgeServer = {
          validate: function (params) {
            required_input.forEach(function (key) {
              ZabbixOneUptimeBridgeServer.params = {}
              if (key in params && params[key] != undefined && params[key] !== '') {
                ZabbixOneUptimeBridgeServer.params[key] = params[key];
              } else {
                console.log(params);
                throw 'Missing value for key: ' + key;
              }
            });

            ZabbixOneUptimeBridgeServer.raw_params = params

            ZabbixOneUptimeBridgeServer.params.event_severity = parseInt(ZabbixOneUptimeBridgeServer.params.event_severity);
            ZabbixOneUptimeBridgeServer.params.event_is_problem = parseInt(ZabbixOneUptimeBridgeServer.params.event_is_problem);
            ZabbixOneUptimeBridgeServer.params.event_is_update = parseInt(ZabbixOneUptimeBridgeServer.params.event_is_update);

            if (ZabbixOneUptimeBridgeServer.event_is_problem == 1) {
              if (ZabbixOneUptimeBridgeServer.event_is_update == 0) {
                ZabbixOneUptimeBridgeServer.kind = 'problem';
              } else {
                ZabbixOneUptimeBridgeServer.kind = 'update';
              }
            } else {
              ZabbixOneUptimeBridgeServer.kind = 'recovery';
            }
          },

          forwardToServer: function () {
            const required_fields_to_create_incident = [];
            required_fields_to_create_incident.forEach(function (key) {
              if (!(key in incident)) {
                throw 'Missing value for key: ' + key;
              }
            });

            const path = '/api/zabbix_webhook';
            var request = new CurlHttpRequest();
            request.AddHeader('Content-Type: application/json');
            var url = ZabbixOneUptimeBridgeServer.raw_params.SERVER_URL + path;

            console.log('[ZabbixOneUptimeBridgeServer Webhook] new request to: ' + url);

            var blob = request.Post(url, JSON.stringify({ data: ZabbixOneUptimeBridgeServer.raw_params }));

            var resp = JSON.parse(blob);

            if (request.Status() !== 200) {
              console.error(
                '[ZabbixOneUptimeBridgeServer Webhook] Request failed, status ' +
                  request.Status() +
                  ': ' +
                  resp.error
              );
              throw 'Request failed: ' + request.Status() + ' ' + resp.error;
            }
            // console.log('[ZabbixOneUptimeBridgeServer Webhook] created incident with id: ' + incident_id);
          },

        };

        try {
          var params = JSON.parse(value);
          console.log(params);
          ZabbixOneUptimeBridgeServer.validate(params);
          // if (ZabbixOneUptimeBridgeServer.kind == 'problem') {
            ZabbixOneUptimeBridgeServer.forwardToServer();
          // }
          return 'OK';
        } catch (error) {
          console.error('[ZabbixOneUptimeBridgeServer Webhook] Error: ' + error);
          throw 'Sending failed: ' + error;
        }
